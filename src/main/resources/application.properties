# 필독!
# .env 파일은 sts 에서는 보이지 않습니다. 

spring.application.name=boss

spring.config.import=optional:file:.env[.properties]
 

# 파일 업로드 경로 설정
file.upload-dir=C:/uploads/
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# SMTP
main.sender.email=${SENDER_EMAIL}
mail.host=${MAIL_HOST}
mail.port=${MAIL_PORT}
mail.username=${MAIL_USERNAME}
mail.password=${MAIL_PASSWORD}
mail.auth-code-expiration-millis=${MAIL_AUTH_CODE_EXPIRATION_MILLIS}


# redis
spring.data.redis.host=${REDIS_HOST}
spring.data.redis.port=${REDIS_PORT}
spring.data.redis.password=${REDIS_PASSWORD}

# tomcat port 번호 변경

server.port=5000

# context명 변경

#server.servlet.context-path=/shop


# DB 연동
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}


# PostgreSQL 설정 (PGVector)
spring.datasource.pg.url=jdbc:postgresql://localhost:5432/final
spring.datasource.pg.username=postgres
spring.datasource.pg.password=1234
spring.datasource.pg.driver-class-name=org.postgresql.Driver

# 이미지 업로드 경로
spring.servlet.multipart.location=path/to/uploads

# Hibernate 설정
spring.jpa.show-sql=true




# JPA가 자동으로 생성하는 SQL문 보기
logging.level.org.hibernate.SQL=trace
#위의 SQL문을 보기 좋게 보기
spring.jpa.properties.hibernate.format_sql=false
logging.level.org.hibernate.type=info

#자동으로 테이블 생성 ( create : drop + create )
spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
# 로그 레벨을 INFO 또는 DEBUG로 설정
logging.level.root=INFO
logging.level.com.onshop.shop=DEBUG


# 자동으로 테이블 생성된 SQL문에서 사용되는 파라미터 보기
logging.level.org.hibernate.orm.jdbc.bind=trace

# 트랜잭션 처리후에  Connection 사용하고 pool에 반환여부 ( 기본값은 true )
spring.jpa.open-in-view=false


naver.client.id=${NAVER_CLIENT_ID}
naver.client.secret=${NAVER_CLIENT_SECRET}
naver.redirect.uri=${NAVER_REDIRECT_URL}

kakao.client.id=${KAKAO_CLIENT_ID}
kakao.redirect.uri=${KAKAO_REDIRECT_URL}

facepp.api.key=${FACEAPP_API_KEY}
facepp.api.secret=${FACEAPP_API_SECRET}





# Spring MVC 설정
spring.mvc.pathmatch.matching-strategy=ant-path-matcher




# LocatDate 사용시 날짜 포맷 지정. 4자리년도-2자리월-2자일 예> 2025-05-23
spring.mvc.format.date=yyyy-MM-dd

server.servlet.session.cookie.same-site=none
server.servlet.session.cookie.secure=true
server.servlet.session.tracking-modes=cookie

server.servlet.session.cookie.name=JSESSIONID
server.servlet.session.cookie.http-only=true


# 포트원 설정
portone.api-key=${PORTONE_API_KEY}
portone.secret-key=${PORTONE_SECRET_KEY}
portone.api-url=${PORTONE_API_URL}


# 포트원 결제 채널 키 설정
payment.channel.kakaopay=${PAYMENT_KAKAOPAY}
payment.channel.tosspay=${PAYMENT_TOSSPAY}
payment.channel.totalpay=${PAYMENT_TOTALPAY}
payment.channel.paycopay=${PAYMENT_PAYCOPAY}



# 사업자 등록증 secret key
business.secret-key=${BUSINESS_SECRET_KEY}



openai.api.key=${OPENAI_API_KEY}
gpt.api.key=${OPENAI_API_KEY}


# 스프링 ai
spring.ai.openai.api-key=${OPENAI_API_KEY}
#기본은 gpt-4o임
spring.ai.openai.chat.options.model=${OPENAI_GPT_MODEL}



